# -*- coding: binary -*-

#
# This mixin is a simplistic implementation of X11 initial connection protocol
#
# Wireshark dissector: https://wiki.wireshark.org/X11
#

module Msf::Exploit::Remote::X11::Extension
  include Rex::Proto::X11::Extension

  # Query for an extension, converts the name of the extension to the ID #
  def query_extension(extension_name, call_count)
    sock.put(X11QueryExtensionRequest.new(extension: extension_name, unused2: call_count).to_binary_s)
    packet = ''
    result = nil
    begin
      packet = sock.timed_read(X11QueryExtensionResponse.new.num_bytes)
      # for debugging, print the following line
      # puts packet.bytes.map { |b| '\\x' + b.to_s(16).rjust(2, '0') }.join
      result = X11QueryExtensionResponse.read(packet)
    rescue StandardError => e
      vprint_bad("Error (#{e}) processing data: #{packet.bytes.map { |b| %(\\x) + b.to_s(16).rjust(2, '0') }.join}")
    end
    result
  end

  # toggles an extension on or off (enable/disable)
  def toggle_extension(extension_id, wanted_major: 0, toggle: true)
    sock.put(
      X11ExtensionToggleRequest.new(
        opcode: extension_id,
        toggle: (toggle ? 0 : 1), # 0 is enable, 1 is disable
        wanted_major: wanted_major
      ).to_binary_s
    )
    packet = ''
    result = nil
    begin
      packet = sock.timed_read(X11ExtensionToggleReply.new.num_bytes)
      result = X11ExtensionToggleReply.read(packet)
    rescue StandardError => e
      vprint_bad("Error (#{e}) processing data: #{packet.bytes.map { |b| %(\\x) + b.to_s(16).rjust(2, '0') }.join}")
    end
    result
  end
end
